# Load full script
cu_ceds6_awsql_sc_orig <- read_lines(origscript_path)
###### 2. Fix AWSQL environment issues ### ###
ceds6sc <- cu_ceds6_awsql_sc_orig
# Adjust the schema name
ceds6sc %<>% sub("CREATE SCHEMA dbo;",  " CREATE SCHEMA ceds6sc_rdx;", .)
ceds6sc %<>% gsub("\\s+dbo\\.",  " ceds6sc_rdx.", .)
ceds6sc %<>% gsub('"(.*?)"',  "\\L\\1", ., perl = T)
ceds6sc %<>% gsub("primary_telephone_number_indicator bool DEFAULT 0 NOT NULL",  "primary_telephone_number_indicator bool DEFAULT FALSE NOT NULL", ., perl = T)
ceds6sc %<>% gsub("_accommodation\\s+_ref_assessment",  "_accommodation_ref_assessment", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("course(.*)\\s+_ref_course_gpa",  "course\\1_ref_course_gpa", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("fk_ps_section\\s+_ref_course_",  "fk_ps_section_ref_course_", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("student_financial_aid_ref_financial_aid_veterans_benefit",  "student_financial_aid_ref_fin_aid_vtrns_bnft", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("org_identification_system\\s+_ref_organization_identifier_type",  "org_identification_system_ref_organization_identifier_type", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("dentification_system\\s+_ref_person_identifier",  "dentification_system_ref_person_identifier", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("fk_organization_fed(era)*l*_accountability",  "fk_organization_fed_accntblty", ., perl = T, ignore.case = T)
# possessives and contractions inside the insert statements
ceds6sc %<>% gsub("(\\s|')(\\w+)'s(?=\\s+(\\w+|\\())",  "\\1\\2''s", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("(\\s|')(\\w+)n't(?=\\s\\w+)",  "\\1\\2n''t", ., perl = T, ignore.case = T)
# plural Abbreviations
ceds6sc %<>% gsub("(\\s|')([A-Z]{2})'s(?=\\s\\w+)",  "\\1\\2''s", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("(\\s|')([A-Z]{2})'s'",  "\\1\\2''s'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("(\\s|')(\\w+)s'(?=\\s\\w+)",  "\\1\\2s''", ., perl = T, ignore.case = T)
# Singular instances
ceds6sc %<>% gsub("Doctoral \\(Doctor's\\) degree",  "Doctoral (Doctor''s) degree", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("C\\?te d'Ivoire",  "Cote dIvoire", ., perl = T, ignore.case = T)
# Language name idiosyncratic
# Apostrophe at the end of word
ceds6sc %<>% gsub("'(\\w+\\?*\\s*\\w+\\?*)''(?=,)",  "'\\1'", ., perl = T, ignore.case = T)
# ceds6sc %<>% gsub("'(\\w+)''(?=,)",  "'\\1'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'(\\w+)'(\\w+)'",  "'\\1 \\2'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'(\\w+\\s)(\\w+)'(\\w+)'",  "'\\1 \\2 \\3'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'(\\w+)'\\s(\\w+)'",  "'\\1 \\2'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub(", ''(\\w+)(\\s\\w+)', ",  ", '\\1\\2', ", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub(", ''(\\w+)', ",  ", '\\1', ", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'(\\w+)'(\\w+\\s\\w+)'",  "'\\1\\2'", ., perl = T, ignore.case = T)
# pomodoro is buzzing - it is long past time to have this script loaded
ceds6sc %<>% gsub("'Ta'izzi-Adeni Arabic'",  "'Taizzi Adeni Arabic'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'Daats'i\\?in'",  "'Daatsi?in'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("d'Oreille",  "d''Oreille", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("ut-Ma'in",  "ut-Ma in", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("Hawai'i",  "Hawaii", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("Ju/'hoan",  "Ju/hoan", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("Kuuku-Ya'u",  "Kuuku-Yau", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("E'\\?apa Woromaipu",  "Eapa Woromaipu", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'Zo'\\?'",  "'Zo?'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'Toraja-Sa'dan'",  "'Toraja-Sadan'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("Me'phaa",  "Me phaa", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'Ts'\\?n-Lao'",  "'Ts ?n-Lao'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'Wik-Me'anha'",  "'Wik-Me anha'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("Post-master's certificate",  "Post-master''s certificate", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'Mi'kmaq; Micmac'",  "'Mikmaq; Micmac'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("St. Mary's",  "St. Mary''s", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("Port Gamble S'Klallam Tribe",  "Port Gamble S''Klallam Tribe", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("(?<=\\w )'snap'(?= \\w)",  "''snap''", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("Associate's",  "Associate''s", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("(\\w+)'s Home",  "\\1''s Home", ., perl = T, ignore.case = T)
###### 3. Write Out the Sliced Files ### ###
# find the directory to read to
clippable_fileroot <- "aw2sql_ceds6sc_snake_case_redux3/"
complete_translation <- "ceds6sc_aws_redux3.sql"
completetranslation_filepath <- paste0(clippable_fileroot, complete_translation)
# the whole script
write_lines(ceds6sc, completetranslation_filepath)
###### 4. Chop script into DbSchema sized chunks ### ###
# find the file to read from
clippable_filepath <- completetranslation_filepath
# use the above file to read blocks out of and then write them out into the world
block_1 <- read_lines(clippable_filepath, n_max = 9950)
write_lines(block_1, paste0(clippable_fileroot, "awsql_ceds6sc_create_update_redux3_pt1.sql"))
block_2 <- read_lines(clippable_filepath, skip = 9950, n_max = 9966)
write_lines(block_2, paste0(clippable_fileroot, "awsql_ceds6sc_create_update_redux3_pt2.sql"))
block_3 <- read_lines(clippable_filepath, skip = 19916, n_max = 9968)
write_lines(block_3, paste0(clippable_fileroot, "awsql_ceds6sc_create_update_redux3_pt3.sql"))
block_4 <- read_lines(clippable_filepath, skip = 29885, n_max = 10000)
write_lines(block_4, paste0(clippable_fileroot, "awsql_ceds6sc_create_update_redux3_pt4.sql"))
# utils::file.edit('awsql_ceds6_snake_case/awsql_ceds6sc_create_update_pt1.sql', editor = "/Program Files/Sublime Text 3/sublime_text.exe")
###### 1. Load AWSQL & Slice Up Script into DbSchema executable size blocks ######
origscript_path <- "aw2sql_ceds6sc_snake_case_redux3/aw2sql_ceds6sc_redux3_complete_initial_translation.sql"
# Load full script
cu_ceds6_awsql_sc_orig <- read_lines(origscript_path)
###### 2. Fix AWSQL environment issues ### ###
ceds6sc <- cu_ceds6_awsql_sc_orig
# Adjust the schema name
ceds6sc %<>% sub("CREATE SCHEMA dbo;",  " CREATE SCHEMA ceds6sc_rdx;", .)
ceds6sc %<>% gsub("\\s+dbo\\.",  " ceds6sc_rdx.", .)
ceds6sc %<>% gsub('"(.*?)"',  "\\L\\1", ., perl = T)
ceds6sc %<>% gsub("primary_telephone_number_indicator bool DEFAULT 0 NOT NULL",  "primary_telephone_number_indicator bool DEFAULT FALSE NOT NULL", ., perl = T)
ceds6sc %<>% gsub("_accommodation\\s+_ref_assessment",  "_accommodation_ref_assessment", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("course(.*)\\s+_ref_course_gpa",  "course\\1_ref_course_gpa", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("fk_ps_section\\s+_ref_course_",  "fk_ps_section_ref_course_", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("student_financial_aid_ref_financial_aid_veterans_benefit",  "student_financial_aid_ref_fin_aid_vtrns_bnft", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("org_identification_system\\s+_ref_organization_identifier_type",  "org_identification_system_ref_organization_identifier_type", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("dentification_system\\s+_ref_person_identifier",  "dentification_system_ref_person_identifier", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("fk_organization_fed(era)*l*_accountability",  "fk_organization_fed_accntblty", ., perl = T, ignore.case = T)
# possessives and contractions inside the insert statements
ceds6sc %<>% gsub("(\\s|')(\\w+)'s(?=\\s+(\\w+|\\())",  "\\1\\2''s", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("(\\s|')(\\w+)n't(?=\\s\\w+)",  "\\1\\2n''t", ., perl = T, ignore.case = T)
# plural Abbreviations
ceds6sc %<>% gsub("(\\s|')([A-Z]{2})'s(?=\\s\\w+)",  "\\1\\2''s", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("(\\s|')([A-Z]{2})'s'",  "\\1\\2''s'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("(\\s|')(\\w+)s'(?=\\s\\w+)",  "\\1\\2s''", ., perl = T, ignore.case = T)
# Singular instances
ceds6sc %<>% gsub("Doctoral \\(Doctor's\\) degree",  "Doctoral (Doctor''s) degree", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("C\\?te d'Ivoire",  "Cote dIvoire", ., perl = T, ignore.case = T)
# Language name idiosyncratic
# Apostrophe at the end of word
ceds6sc %<>% gsub("'(\\w+\\?*\\s*\\w+\\?*)''(?=,)",  "'\\1'", ., perl = T, ignore.case = T)
# ceds6sc %<>% gsub("'(\\w+)''(?=,)",  "'\\1'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'(\\w+)'(\\w+)'",  "'\\1 \\2'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'(\\w+\\s)(\\w+)'(\\w+)'",  "'\\1 \\2 \\3'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'(\\w+)'\\s(\\w+)'",  "'\\1 \\2'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub(", ''(\\w+)(\\s\\w+)', ",  ", '\\1\\2', ", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub(", ''(\\w+)', ",  ", '\\1', ", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'(\\w+)'(\\w+\\s\\w+)'",  "'\\1\\2'", ., perl = T, ignore.case = T)
# pomodoro is buzzing - it is long past time to have this script loaded
ceds6sc %<>% gsub("'Ta'izzi-Adeni Arabic'",  "'Taizzi Adeni Arabic'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'Daats'i\\?in'",  "'Daatsi?in'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("d'Oreille",  "d''Oreille", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("ut-Ma'in",  "ut-Ma in", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("Hawai'i",  "Hawaii", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("Ju/'hoan",  "Ju/hoan", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("Kuuku-Ya'u",  "Kuuku-Yau", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("E'\\?apa Woromaipu",  "Eapa Woromaipu", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'Zo'\\?'",  "'Zo?'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'Toraja-Sa'dan'",  "'Toraja-Sadan'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("Me'phaa",  "Me phaa", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'Ts'\\?n-Lao'",  "'Ts ?n-Lao'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'Wik-Me'anha'",  "'Wik-Me anha'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("Post-master's certificate",  "Post-master''s certificate", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'Mi'kmaq; Micmac'",  "'Mikmaq; Micmac'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("St. Mary's",  "St. Mary''s", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("Port Gamble S'Klallam Tribe",  "Port Gamble S''Klallam Tribe", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("(?<=\\w )'snap'(?= \\w)",  "''snap''", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("Associate's",  "Associate''s", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("(\\w+)'s Home",  "\\1''s Home", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'Sun'aq Tribe of Kodiak (formerly the Shoonaq' Tribe of Kodiak)'",  "'Sun''aq Tribe of Kodiak (formerly the Shoonaq'' Tribe of Kodiak)'", ., perl = T, ignore.case = T)
###### 3. Write Out the Sliced Files ### ###
# find the directory to read to
clippable_fileroot <- "aw2sql_ceds6sc_snake_case_redux3/"
complete_translation <- "ceds6sc_aws_redux3.sql"
completetranslation_filepath <- paste0(clippable_fileroot, complete_translation)
# the whole script
write_lines(ceds6sc, completetranslation_filepath)
###### 4. Chop script into DbSchema sized chunks ### ###
# find the file to read from
clippable_filepath <- completetranslation_filepath
# use the above file to read blocks out of and then write them out into the world
block_1 <- read_lines(clippable_filepath, n_max = 9950)
write_lines(block_1, paste0(clippable_fileroot, "awsql_ceds6sc_create_update_redux3_pt1.sql"))
block_2 <- read_lines(clippable_filepath, skip = 9950, n_max = 9966)
write_lines(block_2, paste0(clippable_fileroot, "awsql_ceds6sc_create_update_redux3_pt2.sql"))
block_3 <- read_lines(clippable_filepath, skip = 19916, n_max = 9968)
write_lines(block_3, paste0(clippable_fileroot, "awsql_ceds6sc_create_update_redux3_pt3.sql"))
block_4 <- read_lines(clippable_filepath, skip = 29885, n_max = 10000)
write_lines(block_4, paste0(clippable_fileroot, "awsql_ceds6sc_create_update_redux3_pt4.sql"))
# utils::file.edit('awsql_ceds6_snake_case/awsql_ceds6sc_create_update_pt1.sql', editor = "/Program Files/Sublime Text 3/sublime_text.exe")
###### 1. Load AWSQL & Slice Up Script into DbSchema executable size blocks ######
origscript_path <- "aw2sql_ceds6sc_snake_case_redux3/aw2sql_ceds6sc_redux3_complete_initial_translation.sql"
# Load full script
cu_ceds6_awsql_sc_orig <- read_lines(origscript_path)
###### 2. Fix AWSQL environment issues ### ###
ceds6sc <- cu_ceds6_awsql_sc_orig
# Adjust the schema name
ceds6sc %<>% sub("CREATE SCHEMA dbo;",  " CREATE SCHEMA ceds6sc_rdx;", .)
ceds6sc %<>% gsub("\\s+dbo\\.",  " ceds6sc_rdx.", .)
ceds6sc %<>% gsub('"(.*?)"',  "\\L\\1", ., perl = T)
ceds6sc %<>% gsub("primary_telephone_number_indicator bool DEFAULT 0 NOT NULL",  "primary_telephone_number_indicator bool DEFAULT FALSE NOT NULL", ., perl = T)
ceds6sc %<>% gsub("_accommodation\\s+_ref_assessment",  "_accommodation_ref_assessment", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("course(.*)\\s+_ref_course_gpa",  "course\\1_ref_course_gpa", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("fk_ps_section\\s+_ref_course_",  "fk_ps_section_ref_course_", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("student_financial_aid_ref_financial_aid_veterans_benefit",  "student_financial_aid_ref_fin_aid_vtrns_bnft", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("org_identification_system\\s+_ref_organization_identifier_type",  "org_identification_system_ref_organization_identifier_type", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("dentification_system\\s+_ref_person_identifier",  "dentification_system_ref_person_identifier", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("fk_organization_fed(era)*l*_accountability",  "fk_organization_fed_accntblty", ., perl = T, ignore.case = T)
# possessives and contractions inside the insert statements
ceds6sc %<>% gsub("(\\s|')(\\w+)'s(?=\\s+(\\w+|\\())",  "\\1\\2''s", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("(\\s|')(\\w+)n't(?=\\s\\w+)",  "\\1\\2n''t", ., perl = T, ignore.case = T)
# plural Abbreviations
ceds6sc %<>% gsub("(\\s|')([A-Z]{2})'s(?=\\s\\w+)",  "\\1\\2''s", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("(\\s|')([A-Z]{2})'s'",  "\\1\\2''s'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("(\\s|')(\\w+)s'(?=\\s\\w+)",  "\\1\\2s''", ., perl = T, ignore.case = T)
# Singular instances
ceds6sc %<>% gsub("Doctoral \\(Doctor's\\) degree",  "Doctoral (Doctor''s) degree", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("C\\?te d'Ivoire",  "Cote dIvoire", ., perl = T, ignore.case = T)
# Language name idiosyncratic
# Apostrophe at the end of word
ceds6sc %<>% gsub("'(\\w+\\?*\\s*\\w+\\?*)''(?=,)",  "'\\1'", ., perl = T, ignore.case = T)
# ceds6sc %<>% gsub("'(\\w+)''(?=,)",  "'\\1'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'(\\w+)'(\\w+)'",  "'\\1 \\2'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'(\\w+\\s)(\\w+)'(\\w+)'",  "'\\1 \\2 \\3'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'(\\w+)'\\s(\\w+)'",  "'\\1 \\2'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub(", ''(\\w+)(\\s\\w+)', ",  ", '\\1\\2', ", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub(", ''(\\w+)', ",  ", '\\1', ", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'(\\w+)'(\\w+\\s\\w+)'",  "'\\1\\2'", ., perl = T, ignore.case = T)
# pomodoro is buzzing - it is long past time to have this script loaded
ceds6sc %<>% gsub("'Ta'izzi-Adeni Arabic'",  "'Taizzi Adeni Arabic'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'Daats'i\\?in'",  "'Daatsi?in'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("d'Oreille",  "d''Oreille", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("ut-Ma'in",  "ut-Ma in", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("Hawai'i",  "Hawaii", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("Ju/'hoan",  "Ju/hoan", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("Kuuku-Ya'u",  "Kuuku-Yau", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("E'\\?apa Woromaipu",  "Eapa Woromaipu", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'Zo'\\?'",  "'Zo?'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'Toraja-Sa'dan'",  "'Toraja-Sadan'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("Me'phaa",  "Me phaa", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'Ts'\\?n-Lao'",  "'Ts ?n-Lao'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'Wik-Me'anha'",  "'Wik-Me anha'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("Post-master's certificate",  "Post-master''s certificate", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'Mi'kmaq; Micmac'",  "'Mikmaq; Micmac'", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("St. Mary's",  "St. Mary''s", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("Port Gamble S'Klallam Tribe",  "Port Gamble S''Klallam Tribe", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("(?<=\\w )'snap'(?= \\w)",  "''snap''", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("Associate's",  "Associate''s", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("(\\w+)'s Home",  "\\1''s Home", ., perl = T, ignore.case = T)
ceds6sc %<>% gsub("'Sun'aq Tribe of Kodiak \\(formerly the Shoonaq' Tribe of Kodiak\\)'",  "'Sun''aq Tribe of Kodiak (formerly the Shoonaq'' Tribe of Kodiak)'", ., perl = T, ignore.case = T)
###### 3. Write Out the Sliced Files ### ###
# find the directory to read to
clippable_fileroot <- "aw2sql_ceds6sc_snake_case_redux3/"
complete_translation <- "ceds6sc_aws_redux3.sql"
completetranslation_filepath <- paste0(clippable_fileroot, complete_translation)
# the whole script
write_lines(ceds6sc, completetranslation_filepath)
###### 4. Chop script into DbSchema sized chunks ### ###
# find the file to read from
clippable_filepath <- completetranslation_filepath
# use the above file to read blocks out of and then write them out into the world
block_1 <- read_lines(clippable_filepath, n_max = 9950)
write_lines(block_1, paste0(clippable_fileroot, "awsql_ceds6sc_create_update_redux3_pt1.sql"))
block_2 <- read_lines(clippable_filepath, skip = 9950, n_max = 9966)
write_lines(block_2, paste0(clippable_fileroot, "awsql_ceds6sc_create_update_redux3_pt2.sql"))
block_3 <- read_lines(clippable_filepath, skip = 19916, n_max = 9968)
write_lines(block_3, paste0(clippable_fileroot, "awsql_ceds6sc_create_update_redux3_pt3.sql"))
block_4 <- read_lines(clippable_filepath, skip = 29885, n_max = 10000)
write_lines(block_4, paste0(clippable_fileroot, "awsql_ceds6sc_create_update_redux3_pt4.sql"))
# utils::file.edit('awsql_ceds6_snake_case/awsql_ceds6sc_create_update_pt1.sql', editor = "/Program Files/Sublime Text 3/sublime_text.exe")
#!/usr/bin/Rscript
# R Script - dplyr predominant
# Author: leerssej
# Date;  Sat Feb 11 15:01:42 2017
# Desc: Loading and Bulk survey of
## Desc: * header names
## Desc: * column types
# Desc: Loading of Character only Datasets
# Desc: Assembly of
## Desc: * completely bound dataframes
## Desc: * completely header-free data only bound dataframes
## Desc: * completely bound first-instance-header dataframes
# install.packages("tidyverse", repos = "https://cran.cnr.berkeley.edu")
# install.packages("bit64", repos = "https://cran.cnr.berkeley.edu")
library(tidyverse)
library(readxl)
library(bit64)
###### 1. Function Library ######
## Excel Reading
read_excel_width <- function(excel_file)
{
require("readxl")
header_length <-
length(readxl:::xlsx_col_names(excel_file))
header_length
}
# read excel names with readxl hidden function
read_excel_headers <- function(excel_file)
{
require("readxl")
header_row <-
readxl:::xlsx_col_names(excel_file) %>%
.[1:11]
header_row
}
# Function to read all the types with readxl hidden function
read_excel_coltypes <- function(excel_file)
{
require("readxl")
column_types <-
readxl:::xlsx_col_types(excel_file, nskip = 1, n = 1) %>%
.[1:11]
column_types
}
# Read excel dataframe
## With headers
### All types are recast `as.character``
read_charxl_full <- function(excel_file)
{
require("readxl")
num_columns <- length(readxl:::xlsx_col_types(excel_file, nskip = 0, n = 1))
datasheet <- readxl::read_excel(excel_file,
col_types = rep("text", num_columns),
col_names = F)
datasheet
}
as.double_spprssWrns <- function(variables)
{
suppressWarnings(as.double(variables))
}
as.bigint_spprssWrns <- function(variables)
{
suppressWarnings(as.integer64(variables))
}
# Read in just the data
## stripping out anything that can't get converted to doubles
## ## ## filtering on the amount column ## ## ##
read_charxl_data <- function(excel_file)
{
dataOnly <-
read_charxl_full(excel_file) %>%
select(1:11) %>%
mutate_all(funs(as.numeric)) %>% #some vals disappear in some files if str8 to bigint (see 0920.xlsx)
mutate_all(round) %>%
mutate_all(funs(as.integer64)) %>%
filter(!is.na(X11))
dataOnly
}
# Use dataOnly frame to generate count of rows of data in file
dataRowCount_excel <- function(excel_file)
{
dataRowCount <-
read_charxl_data(excel_file) %>%
nrow
dataRowCount
}
# Use dataOnly frame to generate sum of specified column
sumOfColumn_excel <- function(excel_file)
{
sum_of_column <-
read_charxl_data(excel_file) %>%
select(11) %>%
mutate_all(round) %>%
summarise_all(funs(sum)) %>%
mutate_all(funs(as.numeric)) %>%
collect %>%
.[[1]]
sum_of_column
}
# warnings()
csv_convertAllText2bigint <- function (file_)
{
read_charxl_full(paste0(file_,".xlsx")) %>%
select(1:11) %>%
mutate(AmountNumeric = suppressWarnings(as.numeric(.[[ncol(.)]]))) %>% # last col to int
mutate(AmountRounded = round(.[[ncol(.)]])) %>% # round last col
select(1:10, ncol(.)) %>% # select 10 + Corrected Amount
filter(suppressWarnings(!is.na(AmountRounded))) %>%
mutate_all(funs(as.integer64(.))) %>%
write.csv(paste0(file_,".csv"), na = "", row.names = F)
}
# csv side of universe
chopit <- function(element) {
substr(element, 1, 5)
}
# Read in csv file and extract out only the data
read_csv_data <- function(csv_file)
{
csv_data <-
read.csv(paste0(csv_file, ".csv"),
stringsAsFactors = F,
na.strings = c("", " ", "NA")) %>%
# mutate_all(funs(as.integer_spprssWrns)) #regular
mutate_all(funs(as.double_spprssWrns)) #oversized
csv_data
}
# Use dataOnly frame to generate count of rows of data in file
dataRowCount_csv <- function(csv_file)
{
dataRowCount <-
read_csv_data(csv_file) %>%
nrow
dataRowCount
}
# Use dataOnly frame to generate sum of specified column
sumOfColumn_csv <- function(csv_file)
{
sum_of_column <-
read_csv_data(csv_file) %>%
select(11) %>%
summarise_all(funs(sum)) %>%
collect %>%
.[[1]]
sum_of_column
}
#### Edit File Type HERE ####
file_extension <- "xlsx"
## Test local directory without spaces
getwd()
# batch file path - but the bash environment doesn't allow one to see the excel totals properly
# file_path <- "C:/Users/Koyot/Documents/GitHub/readxl_bulkloadR/bulkloadR_staging/"
# Run a local version to see that the amounts totals are equal
# to check what is in the actual LEP
setwd(file_path)
getwd()
# names of files to process
file_names <-
list.files(
path = file_path,
pattern = paste0("*.", file_extension))
print("file_names:")
file_names
# generate a list for autoprocessing file tree in gitbash
file_ <-
sapply(file_names, chopit)
# write my_branch_list to run the git branch building
write.table(file_, "my_branch_list", na = "", row.names = F, sep = " ", col.names = F, quote = F, eol = " ")
print("file_:")
file_
cat("\n")
# Table of all the columns counts
Tbl_widths <-
bind_cols(data_frame(file_names),
data.frame(do.call("rbind", lapply(file_names, read_excel_width)))) %>%
rename(num_cols = do.call..rbind...lapply.file_names..read_excel_width..)
print("Tbl_Widths:")
Tbl_widths
write.csv(Tbl_widths, "../analysis/Tbl_widths.csv", na = "", row.names = F)
cat("\n")
# Table of all the Headers
Tbl_headers <-
bind_cols(data_frame(file_names),
data.frame(do.call("rbind", lapply(file_names, read_excel_headers))))
print("Tbl_headers:")
glimpse(Tbl_headers)
write.csv(Tbl_headers, "../analysis/Tbl_headers.csv", na = "", row.names = F)
cat("\n")
# Table of all the Types
Tbl_types <-
bind_cols(data_frame(file_names),
data.frame(do.call("rbind", lapply(file_names, read_excel_coltypes))))
print("Tbl_types:")
Tbl_types
write.csv(Tbl_types, "../analysis/Tbl_types.csv", na = "", row.names = F)
cat("\n")
# Excel Specific Summary MetaTables
## data Row Counts
Tbl_dataRowCounts_xlsx <-
bind_cols(data_frame(file_),
data.frame(do.call("rbind", lapply(file_names, dataRowCount_excel)))) %>%
rename(num_dRows = do.call..rbind...lapply.file_names..dataRowCount_excel..)
warnings()
print("Tbl_dataRowCounts_xlsx")
Tbl_dataRowCounts_xlsx
write.csv(Tbl_dataRowCounts_xlsx, "../analysis/Tbl_dataRowCounts_xlsx.csv", na = "", row.names = F)
cat("\n")
print("Building Excel MetaTables")
## AmountTotals summary Excel
### List of totals which avoids closure issues
# print("1530,12")
# sumOfColumn_excel("1530_.xlsx")
print("list_of_sums_xlsx")
list_of_sums_xlsx <- lapply(file_names, sumOfColumn_excel)
glimpse(list_of_sums_xlsx)
### Bound Table
print("Tbl_AmountSums_xlsx")
Tbl_AmountSums_xlsx <-
bind_cols(data_frame(file_),
data.frame(do.call("rbind", list_of_sums_xlsx))) %>%
rename(Ttl_Amounts = do.call..rbind...list_of_sums_xlsx.)
print("Tbl_AmountSums_xlsx")
Tbl_AmountSums_xlsx
write.csv(Tbl_AmountSums_xlsx, "../analysis/Tbl_AmountSums_xlsx.csv", na = "", row.names = F)
cat("\n")
print("Constructing the .csv")
# Launch into csv side of the universe
## all columns to text, last column to numeric
## the last column is also ceilinged to the integer penny
sapply(file_, csv_convertAllText2bigint)
# warnings()
print("Building csv MetaTables")
# csv Specific Summary MetaTables
## data Row Counts
Tbl_dataRowCounts_csv <-
bind_cols(data_frame(file_),
data.frame(do.call("rbind", lapply(file_, dataRowCount_csv)))) %>%
rename(num_dRows = do.call..rbind...lapply.file_..dataRowCount_csv..)
print("Tbl_dataRowCounts_csv")
Tbl_dataRowCounts_csv
write.csv(Tbl_dataRowCounts_csv, "../analysis/Tbl_dataRowCounts_csv.csv", na = "", row.names = F)
cat("\n")
## AmountTotals summary csv
### List of totals which avoids closure issues
# sumOfColumn_csv("0890_")
print("list_of_sums_csv")
list_of_sums_csv <- lapply(file_, sumOfColumn_csv)
glimpse(list_of_sums_csv)
### Bound Table
print("Tbl_AmountSums_csv")
Tbl_AmountSums_csv <-
bind_cols(data_frame(file_),
data.frame(do.call("rbind", list_of_sums_csv))) %>%
rename(Ttl_Amounts = do.call..rbind...list_of_sums_csv.)
print("Tbl_AmountSums_csv")
Tbl_AmountSums_csv
write.csv(Tbl_AmountSums_csv, "../analysis/Tbl_AmountSums_csv.csv", na = "", row.names = F)
cat("\n")
# Integrity cross check
## RowCounts CrossCheck
print("RowCounts Integrity Cross Check:")
print("csv")
Tbl_dataRowCounts_csv
print("xlsx")
Tbl_dataRowCounts_xlsx
identical(Tbl_dataRowCounts_csv, Tbl_dataRowCounts_xlsx)
all.equal(Tbl_dataRowCounts_csv, Tbl_dataRowCounts_xlsx)
cat("\n")
## AmountSums CrossCheck
print("AmountSums Integrity Cross Check:")
print("csv")
Tbl_AmountSums_csv
print("xlsx")
Tbl_AmountSums_xlsx
identical(Tbl_AmountSums_csv, Tbl_AmountSums_xlsx)
all.equal(Tbl_AmountSums_csv, Tbl_AmountSums_xlsx)
